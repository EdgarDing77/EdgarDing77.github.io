<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>EdgarDing Blog</title>
    <link>http://www.edgarding.cn/</link>
    <description>Recent content on EdgarDing Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 28 Feb 2022 13:54:27 +0000</lastBuildDate><atom:link href="http://www.edgarding.cn/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Spring核心概念梳理</title>
      <link>http://www.edgarding.cn/post/2021/spring%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5%E6%A2%B3%E7%90%86-spring-he-xin-gai-nian-shu-li/</link>
      <pubDate>Mon, 28 Feb 2022 13:54:27 +0000</pubDate>
      
      <guid>http://www.edgarding.cn/post/2021/spring%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5%E6%A2%B3%E7%90%86-spring-he-xin-gai-nian-shu-li/</guid>
      <description>Spring核心概念梳理 Introduction 针对Spring的几个核心概念进行梳理。 SpringBoot框架的启动流程与相应注解。 IOC与AOP两大Sprin</description>
    </item>
    
    <item>
      <title>算法(4)-动态规划</title>
      <link>http://www.edgarding.cn/post/2021/%E7%AE%97%E6%B3%954-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-suan-fa-4-dong-tai-gui-hua/</link>
      <pubDate>Fri, 14 Jan 2022 13:08:05 +0000</pubDate>
      
      <guid>http://www.edgarding.cn/post/2021/%E7%AE%97%E6%B3%954-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-suan-fa-4-dong-tai-gui-hua/</guid>
      <description>算法(4)-动态规划 Introduction **「What」**动态规划（Dynamic Programming，DP），动态规划是一种过把原问题分解为相对简单的子</description>
    </item>
    
    <item>
      <title>算法(3)-二叉树</title>
      <link>http://www.edgarding.cn/post/2021/%E7%AE%97%E6%B3%953-%E4%BA%8C%E5%8F%89%E6%A0%91-suan-fa-3-er-cha-shu/</link>
      <pubDate>Sun, 09 Jan 2022 11:30:28 +0000</pubDate>
      
      <guid>http://www.edgarding.cn/post/2021/%E7%AE%97%E6%B3%953-%E4%BA%8C%E5%8F%89%E6%A0%91-suan-fa-3-er-cha-shu/</guid>
      <description>算法(3)-二叉树 Introduction 「What」每个结点至多有两个分支（即不存在分支度大于2）的树结构。通常分支被称为“左子树”和“右子树”，分支具有左右次</description>
    </item>
    
    <item>
      <title>算法(2)-链表</title>
      <link>http://www.edgarding.cn/post/2021/%E7%AE%97%E6%B3%952-%E9%93%BE%E8%A1%A8-suan-fa-2-lian-biao/</link>
      <pubDate>Tue, 04 Jan 2022 15:15:26 +0000</pubDate>
      
      <guid>http://www.edgarding.cn/post/2021/%E7%AE%97%E6%B3%952-%E9%93%BE%E8%A1%A8-suan-fa-2-lian-biao/</guid>
      <description>算法(2)-链表 Introduction 「What」链表是一种递归的数据结构，它或者为NULL，或者指向一个节点(node)的引用，该节点含有一个元素和指向另一条</description>
    </item>
    
    <item>
      <title>算法(1)-栈和队列</title>
      <link>http://www.edgarding.cn/post/2021/%E7%AE%97%E6%B3%951-%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97-suan-fa-1-zhan-he-dui-lie/</link>
      <pubDate>Tue, 04 Jan 2022 15:14:26 +0000</pubDate>
      
      <guid>http://www.edgarding.cn/post/2021/%E7%AE%97%E6%B3%951-%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97-suan-fa-1-zhan-he-dui-lie/</guid>
      <description>算法(1)-栈与队列 Introduction 栈与队列特点： 栈stack：LIFO后进先出 队列queue：FIFO先进先出 API定义： public interface Queue&amp;lt;Item&amp;gt; implements Iterable&amp;lt;Item&amp;gt; { void enqueue(Item item); Item dequeue(); boolean isEmpty(); int size();</description>
    </item>
    
    <item>
      <title>算法(0)-base</title>
      <link>http://www.edgarding.cn/post/2021/%E7%AE%97%E6%B3%950-base-suan-fa-base/</link>
      <pubDate>Wed, 17 Nov 2021 13:39:19 +0000</pubDate>
      
      <guid>http://www.edgarding.cn/post/2021/%E7%AE%97%E6%B3%950-base-suan-fa-base/</guid>
      <description>算法(0)-base Introduction 该文主要总结一些有关算法的基础，其具体的分类等在之后进行，这也是对自己刷题这么久来的一次系统化整理。该篇主要进行一些前</description>
    </item>
    
    <item>
      <title>Kubernetes-基础</title>
      <link>http://www.edgarding.cn/post/2021/kubernetes-%E5%9F%BA%E7%A1%80-kubernetes-ji-chu/</link>
      <pubDate>Fri, 17 Sep 2021 20:30:16 +0000</pubDate>
      
      <guid>http://www.edgarding.cn/post/2021/kubernetes-%E5%9F%BA%E7%A1%80-kubernetes-ji-chu/</guid>
      <description>Kubernetes-基础 2021/09/14 前言 由于有段时间没接触Kubernetes，最近面试运维开发的时候又经常问到，因此重新体系的入门下Kuberne</description>
    </item>
    
    <item>
      <title>Datadog Agent部署</title>
      <link>http://www.edgarding.cn/post/2021/datadog-agent%E9%83%A8%E7%BD%B2-datadogagent-bu-shu/</link>
      <pubDate>Tue, 14 Sep 2021 17:47:15 +0000</pubDate>
      
      <guid>http://www.edgarding.cn/post/2021/datadog-agent%E9%83%A8%E7%BD%B2-datadogagent-bu-shu/</guid>
      <description>Datadog Agent 部署 Datadog Cluster Agent提供了一种简化的集中式方法来收集集群级别的监视数据。通过充当API服务器和基于节点的代理之间的代理，群集代理有助于减轻</description>
    </item>
    
    <item>
      <title>算法-排序</title>
      <link>http://www.edgarding.cn/post/2021/%E7%AE%97%E6%B3%95-%E6%8E%92%E5%BA%8F-pai-xu-suan-fa/</link>
      <pubDate>Wed, 08 Sep 2021 10:03:34 +0000</pubDate>
      
      <guid>http://www.edgarding.cn/post/2021/%E7%AE%97%E6%B3%95-%E6%8E%92%E5%BA%8F-pai-xu-suan-fa/</guid>
      <description>算法-排序 Introduction 以下为自己整理总结的常用排序算法与实现。 时间复杂度一次完整的计算：http://discrete.gr/complexity/ 基</description>
    </item>
    
    <item>
      <title>SpringBoot核心源码分析</title>
      <link>http://www.edgarding.cn/post/2021/springboot%E6%A0%B8%E5%BF%83%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-springboot%E6%A0%B8%E5%BF%83%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</link>
      <pubDate>Sat, 17 Oct 2020 14:55:50 +0000</pubDate>
      
      <guid>http://www.edgarding.cn/post/2021/springboot%E6%A0%B8%E5%BF%83%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-springboot%E6%A0%B8%E5%BF%83%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</guid>
      <description>SpringBoot 核心源码分析 convention over configuration 约定优于配置 SprinBoot 核心特性：约定优于配置 举一个具体一点的例子，这个理念我们其实一直都在遵循并使用，比如我们在 MVC 项目的开发中会</description>
    </item>
    
    <item>
      <title></title>
      <link>http://www.edgarding.cn/search/placeholder/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://www.edgarding.cn/search/placeholder/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>http://www.edgarding.cn/top/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://www.edgarding.cn/top/about/</guid>
      <description>OneDay OneDay  You Only Live Once.
 Do not go gentle into that good night, Old age should burn and rave at close of day; Rage, rage against the dying of the light.
Though wise men at their end know dark is right, Because their words had forked no lightning they Do not go gentle into that good night.
Good men, the last wave by, crying how bright Their frail deeds might have danced in a green bay, Rage, rage against the dying of the light.</description>
    </item>
    
    <item>
      <title>Posts Archive</title>
      <link>http://www.edgarding.cn/top/archive/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://www.edgarding.cn/top/archive/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>
